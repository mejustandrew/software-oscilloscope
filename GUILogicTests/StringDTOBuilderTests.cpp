#include "stdafx.h"
#include "CppUnitTest.h"
#include "StringDTOBuilder.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace GUILogicTests
{		
	TEST_CLASS(StringDTOBuilderTests)
	{
		StringDTOBuilder builder;

	public:

		TEST_METHOD(BuildStringModel_ShouldReturnAppropriateValidJson_WhenBothBuffersAreEmpty)
		{
			std::vector<float> leftBuffer;
			std::vector<float> rightBuffer;
			std::string expectedStringModel = "{\"LeftBuffer\":[],\"RightBuffer\":[]}<EOF>";

			std::string actualStringModel = builder.BuildStringModel(leftBuffer, rightBuffer);

			Assert::AreEqual(expectedStringModel, actualStringModel);
		}

		TEST_METHOD(BuildStringModel_ShouldReturnAppropriateValidJson_WhenOnlyRightBufferIsEmpty)
		{
			std::vector<float> leftBuffer;
			std::vector<float> rightBuffer;
			leftBuffer.resize(100);
			std::string expectedStringModel = "{\"LeftBuffer\":[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
											  "0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
											  "0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
											  "0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],\"RightBuffer\":[]}<EOF>";

			std::string actualStringModel = builder.BuildStringModel(leftBuffer, rightBuffer);

			Assert::AreEqual(expectedStringModel, actualStringModel);
		}

		TEST_METHOD(BuildStringModel_ShouldReturnAppropriateValidJson_WhenOnlyLeftBufferIsEmpty)
		{
			std::vector<float> leftBuffer;
			std::vector<float> rightBuffer;
			rightBuffer.resize(100);
			std::string expectedStringModel = "{\"LeftBuffer\":[],\"RightBuffer\":[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
				"0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
				"0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
				"0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000]}<EOF>";

			std::string actualStringModel = builder.BuildStringModel(leftBuffer, rightBuffer);

			Assert::AreEqual(expectedStringModel, actualStringModel);
		}

		TEST_METHOD(BuildStringModel_ShouldReturnAppropriateValidJson_WhenBothBuffersArePopulated)
		{
			std::vector<float> leftBuffer;
			std::vector<float> rightBuffer;
			rightBuffer.resize(100);
			leftBuffer.resize(100);
			PopulateBuffer(rightBuffer);
			PopulateBuffer(leftBuffer);
			std::string expectedStringModel = "{\"LeftBuffer\":[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
				"0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
				"0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
				"0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],"
				"\"RightBuffer\":[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
				"0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
				"0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,"
				"0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000]}<EOF>";

			std::string actualStringModel = builder.BuildStringModel(leftBuffer, rightBuffer);

			Assert::AreEqual(expectedStringModel, actualStringModel);
		}

	private:
		void PopulateBuffer(std::vector<float> &buffer)
		{
			for (int i = 0.000000; i < buffer.size(); i++)
			{
				buffer[i] = 0;
			}
		}
	};
}